package {{.PackageName}}

import (
	"time"
	"github.com/google/uuid"
	"{{.MonorepoModulePath}}"
)

// {{.AggregateName}} is the aggregate root for the {{.AggregateName}} domain.
type {{.AggregateName}} struct {
	ID        uuid.UUID `json:"id"`
{{- range .Fields }}
	{{.Name}} {{.Type}} `json:"{{.JSONTag}}"`
{{- end }}
{{- if .Audit }}
	CreatedAt time.Time `json:"created_at"`
	CreatedBy string    `json:"created_by"`
	UpdatedAt time.Time `json:"updated_at"`
	UpdatedBy string    `json:"updated_by"`
{{- end }}
{{- if .VersionField }}
	{{.VersionField}} int `json:"{{.VersionField}}"`
{{- end }}
{{- range .Children }}
	{{.Name}} []{{.ChildModelName}} `json:"{{.JSONTag}}"`
{{- end }}
}

// GetID returns the ID of the {{.AggregateName}} (implements Identifiable interface).
func (a *{{.AggregateName}}) GetID() uuid.UUID {
	return a.ID
}

// ResourceType returns the resource type for URL generation.
func (a *{{.AggregateName}}) ResourceType() string {
	return "{{.AggregateLower}}"
}


// SetID sets the ID of the {{.AggregateName}}.
func (a *{{.AggregateName}}) SetID(id uuid.UUID) {
	a.ID = id
}

// New{{.AggregateName}} creates a new {{.AggregateName}} with a generated ID and initial version.
func New{{.AggregateName}}() *{{.AggregateName}} {
	return &{{.AggregateName}}{
		ID:       core.GenerateNewID(),
		{{- if .VersionField }}
		{{.VersionField}}: 0,
		{{- end }}
	}
}

// EnsureID ensures the aggregate root has a valid ID.
func (a *{{.AggregateName}}) EnsureID() {
	if a.ID == uuid.Nil {
		a.ID = core.GenerateNewID()
	}
}

// BeforeCreate sets creation timestamps and version.
func (a *{{.AggregateName}}) BeforeCreate() {
	a.EnsureID()
	{{- if .Audit }}
	a.CreatedAt = time.Now()
	a.UpdatedAt = time.Now()
	{{- end }}
	{{- if .VersionField }}
	a.{{.VersionField}} = 0
	{{- end }}
}

// BeforeUpdate sets update timestamps and increments version.
func (a *{{.AggregateName}}) BeforeUpdate() {
	{{- if .Audit }}
	a.UpdatedAt = time.Now()
	{{- end }}
	{{- if .VersionField }}
	a.{{.VersionField}}++
	{{- end }}
}