package {{.PackageName}}

import (
	"time"

	"github.com/google/uuid"
	"{{$.ModulePath}}/pkg/lib/core"
)

// {{.ModelName}} represents a {{.ModelName}}.
//
// hatmax:model
type {{.ModelName}} struct {
	ID        uuid.UUID `json:"id"`{{- if .Fields}}{{- range .Fields}}
	{{.Name}} {{.Type}} `json:"{{.JSONTag}}"`
	{{- end -}}{{- end -}}{{- if .Audit}}
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedBy uuid.UUID `json:"created_by"`
	UpdatedBy uuid.UUID `json:"updated_by"`
{{- end}}
}

// GetID returns the ID of the {{.ModelName}}.
func (m *{{.ModelName}}) GetID() uuid.UUID {
	return m.ID
}

func (m *{{.ModelName}}) SetID(id uuid.UUID) {
	m.ID = id
}

func (m *{{.ModelName}}) EnsureID() {
	if m.ID == uuid.Nil {
		m.ID = core.GenerateNewID()
	}
}

{{if .Audit}}
// BeforeCreate sets the initial timestamps and createdBy for the model.
func (m *{{.ModelName}}) BeforeCreate() {
	core.SetAuditFieldsBeforeCreate(&m.CreatedAt, &m.UpdatedAt, &m.CreatedBy, &m.UpdatedBy)
	if m.ID == uuid.Nil {
		m.ID = core.GenerateNewID()
	}
}

// BeforeUpdate updates the UpdatedAt timestamp and UpdatedBy for the model.
func (m *{{.ModelName}}) BeforeUpdate() {
	core.SetAuditFieldsBeforeUpdate(&m.UpdatedAt, &m.UpdatedBy)
}
{{end}}